#!/usr/bin/env perl
#
# KeyNanny provides a framework to protect sensitive data on a Unix host.
# keynanny implements a command line client for
# - setting values
# - getting values
# - listing available keys
# - rendering templates
#
# 2014-05-19 Martin Bartosch <m.bartosch@cynops.de>
#

use strict;
use warnings;

use Getopt::Long;
use IO::Socket::UNIX;
use Template;

use Data::Dumper;
use KeyNanny;

my %options = ();

my %config;
my $socketfile;

sub usage {
    print "Usage: ...\n";
}

sub process_template {
    my $kn        = shift;
    my $infile    = shift;
    my $outfile   = shift;
    my $variables = shift;

    my $fh;
    open( $fh, '<', $infile ) or die "Error opening template file: $!\n";
    local $/;
    my $input = <$fh>;
    close $fh;

    my $template = Template->new( {} );

    my $vars = {};
    foreach my $entry ( @{$variables} ) {
        $vars->{$entry} = $kn->get_var($entry);
    }

    $template->process( \$input, $vars, $outfile ) || die $template->error();

    return 1;
}

GetOptions( \%options, 'socketfile=s', 'variable=s@', 'outfile=s', 'help' );

if ( $options{help} ) {
    usage();
    exit 0;
}

###########################################################################
# process configuration file
$socketfile = $options{socketfile};

my $kn = KeyNanny->new( { socketfile => $socketfile } ) or die "Error: $@";

my $cmd = shift;

my @variables = map { split(/,/) } @{ $options{variable} };

if ( !defined $cmd ) {
    usage;
    exit 0;
}

my $rc = 0;
if ( $cmd eq 'get' ) {
    my $arg = shift;

    print $kn->get_var($arg);

}
elsif ( $cmd eq 'set' ) {
    my $arg = shift;
    die "Not yet implemented";

}
elsif ( $cmd eq 'list' ) {
    print join("\n", $kn->list_vars());
    print "\n";
}
elsif ( $cmd eq 'template' ) {
    my $infile = shift;

    if (scalar @variables == 0) {
	@variables = $kn->list_vars();
    }

    if ( !process_template( $kn, $infile, $options{outfile}, \@variables ) ) {
        $rc = 1;
    }

}
else {
    die "Invalid command '$cmd'. Stopped";
}

exit $rc;
